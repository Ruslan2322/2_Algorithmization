package Lesson_02_Sorting;

//Пусть  даны  две  неубывающие  последовательности  действительных  чисел a1 <= a2 <= ... <= an и b1 <= b2 <= bm.
//Требуется указать те места, на которые нужно вставлять элементы последовательности  b1 <= b2 <=...<= bm в первую
//последовательность так, чтобы новая последовательность оставалась возрастающей

public class Ex_7 {

    public static void main(String[] args) {

        int[] a = new int[]{4,5,3,65,76,8,4,3,5,67,56,3,2,3,4,54,3,2,4,5,22,2,4,5,3,2};
        int[] b = new int[]{545,3,54,4,3,55,6,3,22,1,55,6,232,1,21};
        for(int i = 0; i < b.length; i++){
            if(Search(a, b[i]) == b[i]){
                System.out.println("Без изменений>");
            } else
                System.out.println("Число b[" + i + "] переместить на место " + Search(a, b[i]));
        }
    }
    private static int Search(int[] array, int i) {// функция бинарного поиска
        int low = 0; //нижняя граница для поиска
        double key = i; // значение, которое будем сравнивать
        int hight = array.length; // верхняя граница поиска
        while (low < hight) // условие, искомый элемент не находится по середине отрезка.
        {
            int middle =(hight + low)/2; // поиск середины отрезка
            if(key == array[middle]){
                return (int)array[middle]; //Если искомое и найденное число равны
            }
            if(array[middle] > key) // Сравнение элемента в найденной серидине с искомым элементом, если искомый элемент меньше элемента в середине
                // смещаемся влевой для этого верхней границе массива присваиваем индекс найденного среднего элемента hight = middle,
                // в противном случае смещаемся вправо и присваиваем уже нижней границе массива индекс найденного среднего элемента
                // low = middle + 1 - так как при расчете middle у нас округление в меньшую сторону.
                hight = middle;
            else
                low = middle + 1;
        }
        return low;
    }
}